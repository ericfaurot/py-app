#!python
#
# Copyright (c) 2018 Eric Faurot <eric@faurot.net>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
import configparser
import getopt
import importlib
import sys

import app

def usage():
    progname = sys.argv[0].split('/')[-1]
    print("usage: %s [-dv] [-f conf] [-m module] <cmd>..." % progname)

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "df:m:v")
    except getopt.GetoptError:
        usage()
        sys.exit(1)

    app.DAEMON = True
    app.CONF = None
    app.MODULE = None
    app.VERBOSE = 0

    for opt, arg in opts:
        if opt == "-d":
            app.DAEMON = False
        elif opt == "-f":
            app.CONF = arg
        elif opt == "-m":
            app.MODULE = arg
        elif opt == "-v":
            app.VERBOSE += 1

    if len(args) < 1:
        usage()
        sys.exit(1)

    if app.MODULE is None:
        if app.CONF is None:
            sys.stderr.write("No module specified\n")
            sys.exit(1)
    if app.CONF:
        inter = configparser.ExtendedInterpolation()
        app.CONFIG = configparser.ConfigParser(interpolation = inter)
        app.CONFIG.read(app.CONF)
        if app.MODULE is None:
            app.MODULE = app.CONFIG["app"]["module"]

    module = importlib.import_module(app.MODULE)
    func = getattr(module, "run_%s" % (args[0]))
    func(*args[1:])

if __name__ == "__main__":
    main()
